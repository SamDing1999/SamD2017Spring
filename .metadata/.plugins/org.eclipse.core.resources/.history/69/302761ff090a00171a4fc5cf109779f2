package textExcel;



public class Spreadsheet implements Grid
{

	public Spreadsheet(){
		 for(int i = 0; i < rows; i++){
			 for(int j = 0; j < cols; j++){
				 arrayOfStuff[i][j] = new EmptyCell();
			 }
		 }
	}
	private int rows = 20;
	private int cols = 12;
	private Cell [][] arrayOfStuff = new Cell[rows][cols];
	//2d array for rows and columns
	public String processCommand(String command)
	{
		String[] splitCommand = command.split(" ");
		//in case of lower case
		splitCommand[0] = splitCommand[0].toUpperCase();
		//If length is 3 or less, that means it must want to inspectCell
		if(command.length()==0){
			return "";
		} else if(splitCommand.length >= 3){
			String userInput = splitCommand[2];
			int counter = 3;
			while(counter < splitCommand.length){
				//adds the space that was taken out and the next part of the value
				userInput += " " + splitCommand[counter];
				counter++;
			}
			String cell = splitCommand[0];
			cellAssignment(userInput, cell);
			return getGridText();
			//if its less than 3, it has to be cell inspection
		}else if(command.length() < 3){
			//make if statement to test the type of splitCommand[2]
			//if()
			//return cellInspection(splitCommand[0]);
			//check if the user input has clear, has been changed to uppercase
		} else if (splitCommand[0].contains("CLEAR")){
			//if theres no spaces, then must be just clear so clear entire cell
			if(splitCommand.length == 1){
				 clearEntireCell();
				 return getGridText();
				 //if there is space, then must be clearing just one spot
			} else{
				//in case the cell isnt uppercased
				clearOneCell(splitCommand[1].toUpperCase());
				return getGridText();
			}
		} 
		return "";
	}
	public int getRows()
	{
		return this.rows;
	}


	public int getCols()
	{
		return this.cols;
	}

	public Cell getCell(Location loc)
	{
		return arrayOfStuff[loc.getRow()][loc.getCol()];
	}

	public String getGridText()
	{
		String grid = "   |";
		
		//fills in the top row with the letters
		for(int i = 0; i < cols; i++){
			//cast to character type for letters, add the 10 spaces between this and the next one
			grid += (char) ('A' + i) + "         |";
		}
		
		//fills in the grid
		for(int i = 1; i <= rows; i++){
			//makes new line at end of row and adds the number
			grid += "\n" + i;
			//fixes the spacing when the numbers hit double digits
			if(i >= 10){
				grid += " |";
			}else{
				grid += "  |";
			}
			
			//sets all the values of each part of the array
			for(int k = 0; k < cols; k++){
				//includes the dashed lines at the end, only lets first 10 characters show
				//Puts the cell with its values in the grid
				//i-1 because i started at 1 for numbering but arrays are zero based
				grid += arrayOfStuff[i-1][k].abbreviatedCellText() + "|";
			}
		}
		// skips to next line after finishing creating the grid
		grid += "\n";
		return grid;

		
	}
	public String cellInspection(String cell){
		//makes new spreadsheetlocation object to get the rows and col
		SpreadsheetLocation a = new SpreadsheetLocation(cell);
		String result = arrayOfStuff[a.getRow()][a.getCol()].fullCellText();
		return result;
	}
	//assigns cell using Textcell constructor
	public void cellAssignment(String input, String cell){
		SpreadsheetLocation b = new SpreadsheetLocation(cell);
		arrayOfStuff[b.getRow()][b.getCol()] = new TextCell(input);
	}
	
	//sets everything to emptycell to clear
	public void clearEntireCell(){
		for(int i = 0; i < rows; i++){
			for(int j = 0; j < cols; j++){
				arrayOfStuff[i][j] = new EmptyCell();
			}
		}
	}
	public void clearOneCell(String cell){
		SpreadsheetLocation userInput = new SpreadsheetLocation(cell);
		arrayOfStuff[userInput.getRow()][userInput.getCol()] = new EmptyCell();
	}
	
	/*private String command;
	private Cell[][] grid = new EmptyCell [20] [12];;
	
	public Spreadsheet(){

		for (int i = 0; i < 20; i++){
			for (int j = 0; j< 12; j++){
				grid [i][j] = new EmptyCell();
			}
		}
	}
	
	
	public String processCommand(String command)
	{
		Location loc;
		String[] Command = command.split(" ");
		
		if(Command.length == 2&&Command[0].toLowerCase().equals("clear")){  		//clearing a particular cell (e.g., clear A1).
			clearCell(Command[1]);
			return getGridText();
			
		}else if(Command.length == 3){						//assignment to string values (e.g., A1 = "Hello").
			assignValue(Command[0],Command[2]);
			return getGridText();
			
		}else{
			if(Command.length==1&&Command[0].toLowerCase().equals("clear")){  //clearing the entire sheet (e.g., clear).
				clear();
				return getGridText();
				
			}else{     			//cell inspection (e.g., A1). This should return the value at that cell
				return inspectCell(Command[0]);
				
			}
		}	
	}

	
	public int getRows()
	{
		
		return 20;
	}

	
	public int getCols()
	{
		
		return 12;
	}


	public Cell getCell(Location loc)
	{
		
		int row = loc.getRow();
		int column = loc.getCol();
		return grid[row][column];

	}

	
	public String getGridText()
	{
		 
		String topLetter = "   |";
		for(char i = 'A'; i<='L'; i++){
			topLetter += i + "         |";
		}
		String numbers = "\n";
		for(int i = 0;i < 20;i++){
			if(i<9){
				numbers += (i+1);
				numbers += "  |";
				for(int j = 0; j<12;j++){
					numbers += grid[i][j].abbreviatedCellText() + "|";
				}
				numbers +="\n";
			}else{
				numbers += (i+1);
				numbers += " |";
				for(int j = 0; j<12;j++){
					numbers += grid[i][j].abbreviatedCellText() + "|";
				}
				numbers +="\n";
			}
		}
		return topLetter + numbers;
	}

	public void clear(){
		for(int i = 0; i<20;i++){
			for(int j = 0;j<12;j++){
				grid [i][j] = new EmptyCell();
			}
		}
	}
	
	public void clearCell(String cell){
		SpreadsheetLocation loc = new SpreadsheetLocation(cell.toUpperCase());  
		grid[loc.getRow()][loc.getCol()] = new EmptyCell();
	}
	
	public void assignValue(String cell, String input){
		SpreadsheetLocation loc = new SpreadsheetLocation(cell.toUpperCase());
		grid[loc.getRow()][loc.getCol()] = new TextCell(input);
	}
	
	public String inspectCell(String cell){
		SpreadsheetLocation loc = new SpreadsheetLocation(cell.toUpperCase()); 
		return getCell(loc).fullCellText();
	}*/
}
