package textExcel;



public class Spreadsheet implements Grid
{


	private String command;
	private Cell[][] grid = new EmptyCell [20] [12];;
	
	public Spreadsheet(){

		for (int i = 0; i < 20; i++){
			for (int j = 0; j< 12; j++){
				grid [i][j] = new EmptyCell();
			}
		}
	}
	
	
	public String processCommand(String command){

	String[] splitCommand = command.split(" ");
	//in case of lower case
	splitCommand[0] = splitCommand[0].toUpperCase();
	//If length is 3 or less, that means it must want to inspectCell
	if(command.length()==0){
		return "";
	} else if(splitCommand.length >= 3){
		String userInput = splitCommand[2];
		int counter = 3;
		while(counter < splitCommand.length){
			//adds the space that was taken out and the next part of the value
			userInput += " " + splitCommand[counter];
			counter++;
		}
		String cell = splitCommand[0];
		cellAssignment(userInput, cell);
		return getGridText();
		//if its less than 3, it has to be cell inspection
	}else if(command.length() <= 3){
		return cellInspection(splitCommand[0]);
		//check if the user input has clear, has been changed to uppercase
	} else if (splitCommand[0].contains("CLEAR")){
		//if theres no spaces, then must be just clear so clear entire cell
		if(splitCommand.length == 1){
			 clearEntireCell();
			 return getGridText();
			 //if there is space, then must be clearing just one spot
		} else{
			//in case the cell isnt uppercased
			clearOneCell(splitCommand[1].toUpperCase());
			return getGridText();
		}
	} 
	return "";
	
		/*Location loc;
		String[] Command = command.split(" ");
		
		if(Command.length == 2&&Command[0].toLowerCase().equals("clear")){  		//clearing a particular cell (e.g., clear A1).
			loc = new SpreadsheetLocation(Command[1]);
			Cell input = new EmptyCell();
			grid[loc.getRow()][loc.getCol()] = input;
			return getGridText();
			
		}else if(Command.length == 3){						//assignment to string values (e.g., A1 = "Hello").
			loc = new SpreadsheetLocation(Command[0]); 
			TextCell input = new TextCell(Command[2].substring(1, Command[2].length()-1));
			grid[loc.getRow()][loc.getCol()] = input;
			return getGridText();
			
		}else{
			if(Command.length==1&&Command[0].toLowerCase().equals("clear")){  //clearing the entire sheet (e.g., clear).
				clear();
				
			}else{     			//cell inspection (e.g., A1). This should return the value at that cell
				loc = new SpreadsheetLocation(Command[0]); 
				String content = "\"" + grid[loc.getRow()][loc.getCol()].fullCellText() + "\"";
				return content;
			}
		}	*/
		
	}
public String cellInspection(String cell){
	//makes new spreadsheetlocation object to get the rows and col
	SpreadsheetLocation a = new SpreadsheetLocation(cell);
	String result = grid[a.getRow()][a.getCol()].fullCellText();
	return result;
}
//assigns cell using Textcell constructor
public void cellAssignment(String input, String cell){
	SpreadsheetLocation b = new SpreadsheetLocation(cell);
	grid[b.getRow()][b.getCol()] = new TextCell(input);
}

//sets everything to emptycell to clear
public void clearEntireCell(){
	for(int i = 0; i < 20; i++){
		for(int j = 0; j < 12; j++){
			grid[i][j] = new EmptyCell();
		}
	}
}
public void clearOneCell(String cell){
	SpreadsheetLocation userInput = new SpreadsheetLocation(cell);
	grid[userInput.getRow()][userInput.getCol()] = new EmptyCell();
}


	public String clear(){
		Cell clear = new EmptyCell();
		for(int i = 0; i<20;i++){
			for(int j = 0;j<12;j++){
				grid [i][j] = clear;
			}
		}
		return getGridText();
	}
	public int getRows()
	{
		
		return 20;
	}

	
	public int getCols()
	{
		
		return 12;
	}


	public Cell getCell(Location loc)
	{
		
		int row = loc.getRow();
		int column = loc.getCol();
		return grid[row][column];

	}

	
	public String getGridText()
	{
		
		
		String Grid = ""; 
		String topLetter = "   |";
		for(char i = 'A'; i<='L'; i++){
			topLetter += i + "         |";
		}
		
		String numbers = "\n";
		for(int i = 0;i < 20;i++){
			if(i<9){
				numbers += (i+1);
				numbers += "  |";
				for(int j = 0; j<12;j++){
					numbers += grid[i][j].abbreviatedCellText() + "|";
				}
				numbers +="\n";
			}else{
				numbers += (i+1);
				numbers += " |";
				for(int j = 0; j<12;j++){
					numbers += grid[i][j].abbreviatedCellText() + "|";
				}
				numbers +="\n";
			}
		}
		
		
		Grid = topLetter + numbers;
		return Grid;
	}

}
